# ✅ PARTE 8 COMPLETA - PERMISSÕES (RBAC)

## 📁 ARQUIVOS CRIADOS/ATUALIZADOS

### Migration:
- ✅ `database/migrations/2025_01_01_000000_add_role_to_users.php`
  - Adiciona coluna `role` na tabela `users`
  - Default: 'leitor'
  - Indexado para performance

### Middleware:
- ✅ `app/Http/Middleware/EnsureRole.php`
  - Valida role do usuário
  - Permite múltiplas roles via parâmetros

### Policies:
- ✅ `app/Policies/PedidoPolicy.php`
  - viewAny, view, create, update, delete, bulk
  - Roles: admin, gestor, atendimento, producao, entrega, leitor

- ✅ `app/Policies/ConsignacaoPolicy.php`
  - viewAny, view, create, update, delete
  - Roles: admin, gestor, leitor

- ✅ `app/Policies/CupomPolicy.php`
  - viewAny, view, create, update, delete
  - Roles: admin, gestor, leitor

### Providers:
- ✅ `app/Providers/AuthServiceProvider.php` (atualizado)
  - Registra policies
  - Define gates (view-reports, manage-catalog, manage-users)

- ✅ `app/Providers/AppServiceProvider.php` (atualizado)
  - Helper Blade `@role`

---

## 🎯 PERMISSÕES POR ROLE

### admin
- ✅ Tudo (pedidos, consignações, cupons, relatórios, usuários)

### gestor
- ✅ Tudo exceto gerenciar usuários
- ✅ Visualiza e gerencia relatórios

### atendimento
- ✅ Criar e editar pedidos
- ✅ Ver pedidos e consignações
- ❌ Não pode criar consignações
- ❌ Não pode ver relatórios

### producao
- ✅ Ver e editar pedidos
- ✅ Ações em massa (bulk)
- ✅ Ver consignações
- ❌ Não pode criar pedidos/consignações
- ❌ Não pode ver relatórios

### entrega
- ✅ Ver pedidos
- ✅ Ver consignações
- ❌ Não pode editar
- ❌ Não pode ver relatórios

### leitor
- ✅ Ver pedidos
- ✅ Ver consignações
- ✅ Ver cupons
- ❌ Não pode criar/editar/remover
- ❌ Não pode ver relatórios

---

## 📋 PRÓXIMOS PASSOS

### 1. Registrar middleware no Kernel:
```php
// FILE: app/Http/Kernel.php
// array $routeMiddleware ou $middlewareAliases

'role' => \App\Http\Middleware\EnsureRole::class,
```

### 2. Atualizar rotas com middleware:
```php
// Revisar routes/web.php e adicionar:
Route::middleware(['auth','role:admin,gestor'])->group(function(){
  Route::get('relatorios', [ReportsController::class,'index'])->name('relatorios.index');
});
```

### 3. Proteger rotas bulk:
```php
Route::post('pedidos/bulk', [PedidosBulkController::class,'update'])
  ->name('pedidos.bulk')
  ->middleware('can:bulk,App\\Models\\Pedido');
```

### 4. Atualizar views com @can:
- ✅ Adicionar `@can` em botões de criar/editar/remover
- ✅ Ver exemplos abaixo

---

## 🎨 EXEMPLOS DE USO NAS VIEWS

### Dashboard (page-actions):
```blade
@section('page-actions')
  @can('create', App\Models\Pedido::class)
    <a href="{{ route('pedidos.create') }}" class="btn-primary">Novo Pedido</a>
  @endcan

  @can('view-reports')
    <a href="{{ route('relatorios.index') }}" class="pill">📊 Relatórios</a>
  @endcan

  @can('viewAny', App\Models\Consignacao::class)
    <a href="{{ route('consignacoes.index') }}" class="pill">Consignações</a>
  @endcan
@endsection
```

### Pedidos (ações por linha):
```blade
<td class="text-right">
  <a class="pill" href="{{ route('pedidos.show',$p) }}">Ver</a>
  
  @can('update',$p)
    <a class="pill" href="{{ route('pedidos.edit',$p) }}">Editar</a>
  @endcan
  
  @can('delete',$p)
    <form method="POST" action="{{ route('pedidos.destroy',$p) }}" class="inline">
      @csrf @method('DELETE')
      <button class="pill">Remover</button>
    </form>
  @endcan
</td>
```

### Bulk actions:
```blade
@can('bulk', App\Models\Pedido::class)
  {{-- renderizar barra de bulk --}}
@endcan
```

### Helper @role:
```blade
@role('admin','gestor')
  <a class="pill" href="{{ route('users.index') }}">Usuários</a>
@endrole
```

---

## 🚀 IMPLEMENTAÇÃO

### 1. Rodar migration:
```bash
php artisan migrate
```

### 2. Atualizar usuários existentes:
```sql
UPDATE users SET role = 'admin' WHERE email = 'seu@email.com';
```

### 3. Limpar cache:
```bash
php artisan cache:clear
php artisan config:clear
php artisan route:clear
php artisan view:clear
php artisan optimize:clear
```

### 4. Registrar middleware (se ainda não foi):
```bash
php artisan make:middleware EnsureRole
```
(Já criado manualmente, mas pode revisar)

### 5. Proteger rotas críticas:
Revisar `routes/web.php` e adicionar middleware:
- Relatórios: `middleware('can:view-reports')`
- Bulk actions: `middleware('can:bulk,App\\Models\\Pedido')`

---

## 🔒 SEGURANÇA

### Defense in Depth:
1. ✅ **UI**: Esconde botões/menus com `@can`
2. ✅ **Backend**: Valida com policies/gates
3. ✅ **Middleware**: Bloqueia acesso não autorizado
4. ✅ **Database**: Logs de auditoria (implementar depois)

### Boas Práticas:
- ✅ Nunca confiar apenas na UI
- ✅ Sempre validar no backend
- ✅ Usar policies para lógica complexa
- ✅ Usar gates para ações gerais
- ✅ Documentar permissões por role

---

## 📊 MATRIZ DE PERMISSÕES

| Ação | admin | gestor | atendimento | producao | entrega | leitor |
|------|-------|--------|-------------|----------|---------|--------|
| Ver Pedidos | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ |
| Criar Pedidos | ✅ | ✅ | ✅ | ❌ | ❌ | ❌ |
| Editar Pedidos | ✅ | ✅ | ✅ | ✅ | ❌ | ❌ |
| Remover Pedidos | ✅ | ✅ | ❌ | ❌ | ❌ | ❌ |
| Bulk Actions | ✅ | ✅ | ❌ | ✅ | ❌ | ❌ |
| Ver Consignações | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ |
| Criar Consignações | ✅ | ✅ | ❌ | ❌ | ❌ | ❌ |
| Editar Consignações | ✅ | ✅ | ❌ | ❌ | ❌ | ❌ |
| Ver Relatórios | ✅ | ✅ | ❌ | ❌ | ❌ | ❌ |
| Gerenciar Usuários | ✅ | ❌ | ❌ | ❌ | ❌ | ❌ |

---

## ✅ CHECKLIST FINAL

- [ ] Rodar migration
- [ ] Atualizar roles dos usuários existentes
- [ ] Registrar middleware no Kernel
- [ ] Proteger rotas críticas
- [ ] Atualizar views com @can
- [ ] Testar com diferentes roles
- [ ] Implementar logs de auditoria (opcional)
- [ ] Documentar permissões para equipe

**Arquivos prontos! Execute a migration e teste.** 🚀
