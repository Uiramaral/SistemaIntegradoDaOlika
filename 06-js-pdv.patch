diff --git a/public/js/pdv.js b/public/js/pdv.js
index 1234567..1234568
--- a/public/js/pdv.js
+++ b/public/js/pdv.js
@@ -1,200 +1,50 @@
-/* Olika PDV – JS mínimo (somente UX local)
-   Integrações reais (buscar clientes/produtos/cálculo entrega/aplicar cupom/finalizar pedido)
-   devem chamar suas rotas Laravel existentes (axios/fetch).
-*/
-
-(function(){
-  const fmtBR = v => v.toLocaleString('pt-BR',{style:'currency',currency:'BRL'});
-
-  const cart = [];
-  const els = {
-    cartBody: document.querySelector('#cart-body'),
-    subtotal: document.querySelector('#sum-subtotal'),
-    discount: document.querySelector('#sum-discount'),
-    shipping: document.querySelector('#sum-shipping'),
-    total: document.querySelector('#sum-total'),
-    addBtn: document.querySelector('#btn-add'),
-    freeDesc: document.querySelector('#free-desc'),
-    freePrice: document.querySelector('#free-price'),
-    freeQty: document.querySelector('#free-qty'),
-    applyEligible: document.querySelector('#apply-eligible'),
-    eligibleSelect: document.querySelector('#eligible-coupons'),
-    applyCode: document.querySelector('#apply-code'),
-    couponCode: document.querySelector('#coupon-code'),
-    finalize: document.querySelector('#btn-finalize'),
-  };
-
-  // stepper
-  document.querySelectorAll('.stepper button').forEach(b=>{
-    b.addEventListener('click', ()=>{
-      const step = Number(b.dataset.step||1);
-      const i = els.freeQty; i.value = Math.max(1, Number(i.value||1)+step);
-    })
-  });
-
-  // adicionar item avulso (mock local)
-  els.addBtn.addEventListener('click', ()=>{
-    const desc = (els.freeDesc.value||'Item avulso').trim();
-    const price = Number(els.freePrice.value||0);
-    const qty = Math.max(1, Number(els.freeQty.value||1));
-    if(!desc || !price){ alert('Informe descrição e preço.'); return; }
-    cart.push({ id: 'free:'+Date.now(), name: desc, price, qty });
-    els.freeDesc.value=''; els.freePrice.value=''; els.freeQty.value=1;
-    renderCart();
-  });
-
-  function renderCart(){
-    if(!cart.length){
-      els.cartBody.innerHTML = `<tr><td colspan="5" class="pdv-empty">Nenhum item adicionado</td></tr>`;
-      recalc(); return;
-    }
-    els.cartBody.innerHTML = cart.map(item=>{
-      const rowTotal = item.price*item.qty;
-      return `
-        <tr data-id="${item.id}">
-          <td>${item.name}</td>
-          <td>${fmtBR(item.price)}</td>
-          <td>
-            <div class="stepper">
-              <button type="button" data-step="-1">-</button>
-              <input type="number" value="${item.qty}" min="1">
-              <button type="button" data-step="1">+</button>
-            </div>
-          </td>
-          <td>${fmtBR(rowTotal)}</td>
-          <td style="text-align:right"><button class="ol-btn ol-btn-outline js-remove">Remover</button></td>
-        </tr>`;
-    }).join('');
-    // binds
-    els.cartBody.querySelectorAll('.stepper').forEach(st=>{
-      const tr = st.closest('tr'); const id = tr.dataset.id;
-      const input = st.querySelector('input');
-      st.querySelectorAll('button').forEach(b=>{
-        b.addEventListener('click', ()=>{
-          const step = Number(b.dataset.step||1);
-          input.value = Math.max(1, Number(input.value||1)+step);
-          const it = cart.find(x=>x.id===id); it.qty = Number(input.value); recalc();
-        })
-      });
-      input.addEventListener('change', ()=>{
-        const it = cart.find(x=>x.id===id); it.qty = Math.max(1, Number(input.value||1)); recalc();
-      });
-    });
-    els.cartBody.querySelectorAll('.js-remove').forEach(btn=>{
-      btn.addEventListener('click', ()=>{
-        const id = btn.closest('tr').dataset.id;
-        const idx = cart.findIndex(x=>x.id===id);
-        if(idx>=0){ cart.splice(idx,1); renderCart(); }
-      });
-    });
-    recalc();
-  }
-
-  let totals = { subtotal:0, discount:0, shipping:0, total:0 };
-
-  function recalc(){
-    totals.subtotal = cart.reduce((s,i)=> s + (i.price*i.qty), 0);
-    // desconto e frete são mock; no real, chame backend
-    totals.total = Math.max(0, totals.subtotal - totals.discount + totals.shipping);
-    els.subtotal.textContent = fmtBR(totals.subtotal);
-    els.discount.textContent = fmtBR(totals.discount);
-    els.shipping.textContent = fmtBR(totals.shipping);
-    els.total.textContent = fmtBR(totals.total);
-  }
-
-  // aplicar cupom (mock: apenas valida formato; o real consulta o banco)
-  els.applyCode.addEventListener('click', ()=>{
-    const code = (els.couponCode.value||'').trim().toUpperCase();
-    if(!code){ alert('Informe um cupom.'); return; }
-    // exemplo: backend decide o desconto; aqui só simula 10%
-    totals.discount = cart.length ? cart.reduce((s,i)=> s + (i.price*i.qty),0) * 0.10 : 0;
-    recalc();
-  });
-  els.applyEligible.addEventListener('click', ()=>{
-    if(!els.eligibleSelect.value){ alert('Selecione um cupom elegível.'); return; }
-    totals.discount = cart.length ? cart.reduce((s,i)=> s + (i.price*i.qty),0) * 0.10 : 0;
-    recalc();
-  });
-
-  // finalizar (exemplo chamando rota Laravel)
-  els.finalize.addEventListener('click', async ()=>{
-    if(!cart.length){ alert('Adicione itens ao carrinho.'); return; }
-    // TODO: montar payload real com cliente/endereco/entrega/pagamento
-    // await fetch("{{ route('pdv.finalizar') }}", { method:'POST', headers:{'Content-Type':'application/json','X-CSRF-TOKEN':'{{ csrf_token() }}'}, body: JSON.stringify(payload)});
-    alert('Pedido finalizado (mock). Integre com sua rota Laravel.');
-  });
-
-})();
+const els = {
+  finalize: document.getElementById('finalize'),
+  cartBody: document.querySelector('#cart-table tbody'),
+};
+const cart = [];
+function money(v){ return v.toLocaleString('pt-BR',{style:'currency',currency:'BRL'}); }
+function renderCart(){
+  els.cartBody.innerHTML = cart.map((i,idx)=>`<tr>
+    <td>${i.name}</td><td>${money(i.price)}</td><td>${i.qty}</td><td>${money(i.price*i.qty)}</td>
+    <td><button data-i="${idx}" class="ol-link rm">remover</button></td></tr>`).join('');
+  const sub = cart.reduce((s,i)=>s+i.price*i.qty,0);
+  document.getElementById('sum-sub').textContent = money(sub);
+  document.getElementById('sum-total').textContent = money(sub); // simplificado (desconto/entrega calculados no back)
+}
+document.addEventListener('click',e=>{
+  if(e.target.matches('.rm')){ cart.splice(+e.target.dataset.i,1); renderCart(); }
+});
+
+els.finalize.addEventListener('click', async ()=>{
+  if(!cart.length){ alert('Adicione itens ao carrinho.'); return; }
+  const payload = {
+    customer_id: document.getElementById('cli-name').value ? 1 : null,
+    items: cart.map(i=>({ name:i.name, price:i.price, qty:i.qty })),
+    payment_method: document.querySelector('input[name="pay"]:checked').value, // pix|link-mp|fiado
+    note: document.getElementById('order-notes').value,
+    coupon_code: document.getElementById('coupon-code').value
+  };
+  try{
+    const res = await fetch(window.Olika.routes.pdvStore,{
+      method:'POST',
+      headers:{'Content-Type':'application/json','X-CSRF-TOKEN':window.Olika.csrf},
+      body: JSON.stringify(payload)
+    });
+    const out = await res.json();
+    if(!out.ok){ alert('Erro ao criar pedido'); return; }
+    if(out.init_point){ window.open(out.init_point,'_blank'); }
+    if(out.pix?.qr_code_base64){
+      const w = window.open('','PIX','width=420,height=540');
+      w.document.write(`<img style="width:380px" src="data:image/png;base64,${out.pix.qr_code_base64}"><p>${out.pix.qr_code}</p>`);
+    }
+    alert(`Pedido #${out.number} criado com sucesso!`);
+    cart.length=0; renderCart();
+  }catch(e){ alert('Erro de conexão'); }
+});
