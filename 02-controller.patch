diff --git a/app/Http/Controllers/PDVController.php b/app/Http/Controllers/PDVController.php
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/app/Http/Controllers/PDVController.php
@@ -0,0 +1,85 @@
+<?php
+
+namespace App\Http\Controllers;
+
+use App\Services\MercadoPagoApi;
+use Illuminate\Http\Request;
+use Illuminate\Support\Facades\DB;
+
+class PDVController extends Controller
+{
+    public function store(Request $req, MercadoPagoApi $mp)
+    {
+        $data = $req->validate([
+            'customer_id'    => 'nullable|integer',
+            'items'          => 'required|array|min:1',
+            'items.*.name'   => 'required|string',
+            'items.*.qty'    => 'required|integer|min:1',
+            'items.*.price'  => 'required|numeric|min:0',
+            'payment_method' => 'required|in:pix,link-mp,fiado',
+            'note'           => 'nullable|string',
+            'coupon_code'    => 'nullable|string',
+        ]);
+
+        $total = collect($data['items'])->reduce(fn($s,$i)=>$s+($i['price']*$i['qty']),0);
+        $orderNumber = now()->format('ymd').'-'.rand(1000,9999);
+
+        return DB::transaction(function() use ($data,$total,$orderNumber,$mp){
+            // grava orders + order_items de forma simplificada
+            $orderId = DB::table('orders')->insertGetId([
+                'customer_id'   => $data['customer_id'] ?? 0,
+                'order_number'  => $orderNumber,
+                'status'        => 'pending',
+                'total_amount'  => $total,
+                'final_amount'  => $total,
+                'payment_method'=> $data['payment_method']==='link-mp'?'credit_card':$data['payment_method'],
+                'created_at'    => now(), 'updated_at'=>now(),
+            ]);
+            foreach($data['items'] as $i){
+                DB::table('order_items')->insert([
+                    'order_id'=>$orderId,'product_id'=>0,'quantity'=>$i['qty'],
+                    'unit_price'=>$i['price'],'total_price'=>$i['qty']*$i['price'],
+                    'created_at'=>now(),'updated_at'=>now(),
+                ]);
+            }
+
+            $orderPayload = [
+                'number'=>$orderNumber,
+                'items'=>array_map(fn($i)=>['title'=>$i['name'],'quantity'=>$i['qty'],'unit_price'=>$i['price']],$data['items']),
+                'total'=>$total,
+                'notification_url'=>route('mp.webhook',[],false),
+                'back_urls'=>[
+                    'success'=>route('checkout.success',[],false),
+                    'failure'=>route('checkout.failure',[],false),
+                    'pending'=>route('checkout.pending',[],false),
+                ],
+            ];
+
+            if ($data['payment_method']==='pix') {
+                $pix = $mp->createPixPayment($orderPayload, []);
+                if(!$pix['ok']) abort(422,'Erro ao criar PIX');
+                DB::table('orders')->where('id',$orderId)->update([
+                    'payment_provider'=>'mercadopago',
+                    'payment_id'=>$pix['id'] ?? null,
+                    'pix_qr_base64'=>$pix['qr_code_base64'] ?? null,
+                    'pix_copy_paste'=>$pix['qr_code'] ?? null,
+                    'payment_status'=>'pending',
+                    'updated_at'=>now(),
+                ]);
+                return response()->json(['ok'=>true,'number'=>$orderNumber,'pix'=>$pix]);
+            }
+
+            if ($data['payment_method']==='link-mp') {
+                $pref = $mp->createPaymentLink($orderPayload, []);
+                if(!$pref['ok']) abort(422,'Erro ao criar link de pagamento');
+                DB::table('orders')->where('id',$orderId)->update([
+                    'payment_provider'=>'mercadopago',
+                    'preference_id'=>$pref['id'] ?? null,
+                    'payment_link'=>$pref['init_point'] ?? null,
+                    'payment_status'=>'pending',
+                    'updated_at'=>now(),
+                ]);
+                return response()->json(['ok'=>true,'number'=>$orderNumber,'init_point'=>$pref['init_point'] ?? null]);
+            }
+
+            // fiado
+            DB::table('orders')->where('id',$orderId)->update(['payment_status'=>'pending','updated_at'=>now()]);
+            return response()->json(['ok'=>true,'number'=>$orderNumber]);
+        });
+    }
+}
